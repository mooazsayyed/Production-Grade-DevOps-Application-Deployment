[0m[1mdata.aws_ami.os_image: Reading...[0m[0m
[0m[1mmodule.eks.module.kms.data.aws_partition.current[0]: Reading...[0m[0m
[0m[1mmodule.eks.data.aws_partition.current[0]: Reading...[0m[0m
[0m[1mmodule.eks.data.aws_iam_policy_document.assume_role_policy[0]: Reading...[0m[0m
[0m[1mmodule.eks.module.kms.data.aws_caller_identity.current[0]: Reading...[0m[0m
[0m[1mmodule.eks.data.aws_caller_identity.current[0]: Reading...[0m[0m
[0m[1mmodule.eks.data.aws_iam_policy_document.assume_role_policy[0]: Read complete after 0s [id=2830595799][0m
[0m[1mmodule.eks.data.aws_partition.current[0]: Read complete after 0s [id=aws][0m
[0m[1mmodule.eks.module.kms.data.aws_partition.current[0]: Read complete after 0s [id=aws][0m
[0m[1mmodule.eks.data.aws_iam_policy_document.custom[0]: Reading...[0m[0m
[0m[1mmodule.eks.data.aws_iam_policy_document.custom[0]: Read complete after 0s [id=513122117][0m
[0m[1mmodule.eks.module.eks_managed_node_group["tws-demo-ng"].data.aws_caller_identity.current: Reading...[0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["tws-demo-ng"].data.aws_partition.current: Reading...[0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["tws-demo-ng"].data.aws_partition.current: Read complete after 0s [id=aws][0m
[0m[1mmodule.eks.module.eks_managed_node_group["tws-demo-ng"].data.aws_iam_policy_document.assume_role_policy[0]: Reading...[0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["tws-demo-ng"].data.aws_iam_policy_document.assume_role_policy[0]: Read complete after 0s [id=2560088296][0m
[0m[1mmodule.eks.data.aws_caller_identity.current[0]: Read complete after 1s [id=393627897845][0m
[0m[1mmodule.eks.data.aws_iam_session_context.current[0]: Reading...[0m[0m
[0m[1mmodule.eks.data.aws_iam_session_context.current[0]: Read complete after 0s [id=arn:aws:iam::393627897845:user/Admin-One][0m
[0m[1mmodule.eks.module.kms.data.aws_caller_identity.current[0]: Read complete after 1s [id=393627897845][0m
[0m[1mmodule.eks.module.eks_managed_node_group["tws-demo-ng"].data.aws_caller_identity.current: Read complete after 1s [id=393627897845][0m
[0m[1mdata.aws_ami.os_image: Read complete after 3s [id=ami-0b221b3f0d70fd316][0m

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m
 [36m<=[0m read (data resources)[0m

Terraform will perform the following actions:

[1m  # data.aws_instances.eks_nodes[0m will be read during apply
  # (depends on a resource or a module with changes pending)
[0m [36m<=[0m[0m data "aws_instances" "eks_nodes" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m ids            = (known after apply)
      [32m+[0m[0m instance_tags  = {
          [32m+[0m[0m "eks:cluster-name" = "tws-eks-cluster"
        }
      [32m+[0m[0m ipv6_addresses = (known after apply)
      [32m+[0m[0m private_ips    = (known after apply)
      [32m+[0m[0m public_ips     = (known after apply)

      [32m+[0m[0m filter {
          [32m+[0m[0m name   = "instance-state-name"
          [32m+[0m[0m values = [
              [32m+[0m[0m "running",
            ]
        }
    }

[1m  # aws_eip.jenkins_server_ip[0m will be created
[0m  [32m+[0m[0m resource "aws_eip" "jenkins_server_ip" {
      [32m+[0m[0m allocation_id        = (known after apply)
      [32m+[0m[0m arn                  = (known after apply)
      [32m+[0m[0m association_id       = (known after apply)
      [32m+[0m[0m carrier_ip           = (known after apply)
      [32m+[0m[0m customer_owned_ip    = (known after apply)
      [32m+[0m[0m domain               = "vpc"
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m instance             = (known after apply)
      [32m+[0m[0m ipam_pool_id         = (known after apply)
      [32m+[0m[0m network_border_group = (known after apply)
      [32m+[0m[0m network_interface    = (known after apply)
      [32m+[0m[0m private_dns          = (known after apply)
      [32m+[0m[0m private_ip           = (known after apply)
      [32m+[0m[0m ptr_record           = (known after apply)
      [32m+[0m[0m public_dns           = (known after apply)
      [32m+[0m[0m public_ip            = (known after apply)
      [32m+[0m[0m public_ipv4_pool     = (known after apply)
      [32m+[0m[0m tags_all             = (known after apply)
      [32m+[0m[0m vpc                  = (known after apply)
    }

[1m  # aws_instance.bastion_host[0m will be created
[0m  [32m+[0m[0m resource "aws_instance" "bastion_host" {
      [32m+[0m[0m ami                                  = "ami-0b221b3f0d70fd316"
      [32m+[0m[0m arn                                  = (known after apply)
      [32m+[0m[0m associate_public_ip_address          = (known after apply)
      [32m+[0m[0m availability_zone                    = (known after apply)
      [32m+[0m[0m cpu_core_count                       = (known after apply)
      [32m+[0m[0m cpu_threads_per_core                 = (known after apply)
      [32m+[0m[0m disable_api_stop                     = (known after apply)
      [32m+[0m[0m disable_api_termination              = (known after apply)
      [32m+[0m[0m ebs_optimized                        = (known after apply)
      [32m+[0m[0m enable_primary_ipv6                  = (known after apply)
      [32m+[0m[0m get_password_data                    = false
      [32m+[0m[0m host_id                              = (known after apply)
      [32m+[0m[0m host_resource_group_arn              = (known after apply)
      [32m+[0m[0m iam_instance_profile                 = (known after apply)
      [32m+[0m[0m id                                   = (known after apply)
      [32m+[0m[0m instance_initiated_shutdown_behavior = (known after apply)
      [32m+[0m[0m instance_lifecycle                   = (known after apply)
      [32m+[0m[0m instance_state                       = (known after apply)
      [32m+[0m[0m instance_type                        = "t3.medium"
      [32m+[0m[0m ipv6_address_count                   = (known after apply)
      [32m+[0m[0m ipv6_addresses                       = (known after apply)
      [32m+[0m[0m key_name                             = "terra-automate-key"
      [32m+[0m[0m monitoring                           = (known after apply)
      [32m+[0m[0m outpost_arn                          = (known after apply)
      [32m+[0m[0m password_data                        = (known after apply)
      [32m+[0m[0m placement_group                      = (known after apply)
      [32m+[0m[0m placement_partition_number           = (known after apply)
      [32m+[0m[0m primary_network_interface_id         = (known after apply)
      [32m+[0m[0m private_dns                          = (known after apply)
      [32m+[0m[0m private_ip                           = (known after apply)
      [32m+[0m[0m public_dns                           = (known after apply)
      [32m+[0m[0m public_ip                            = (known after apply)
      [32m+[0m[0m secondary_private_ips                = (known after apply)
      [32m+[0m[0m security_groups                      = (known after apply)
      [32m+[0m[0m source_dest_check                    = true
      [32m+[0m[0m spot_instance_request_id             = (known after apply)
      [32m+[0m[0m subnet_id                            = (known after apply)
      [32m+[0m[0m tags                                 = {
          [32m+[0m[0m "Name" = "Bastion-Host"
        }
      [32m+[0m[0m tags_all                             = {
          [32m+[0m[0m "Name" = "Bastion-Host"
        }
      [32m+[0m[0m tenancy                              = (known after apply)
      [32m+[0m[0m user_data                            = "7d9a4c26cd429bfaaed36ce28d0ea2d65843648e"
      [32m+[0m[0m user_data_base64                     = (known after apply)
      [32m+[0m[0m user_data_replace_on_change          = false
      [32m+[0m[0m vpc_security_group_ids               = (known after apply)

      [32m+[0m[0m capacity_reservation_specification (known after apply)

      [32m+[0m[0m cpu_options (known after apply)

      [32m+[0m[0m ebs_block_device (known after apply)

      [32m+[0m[0m enclave_options (known after apply)

      [32m+[0m[0m ephemeral_block_device (known after apply)

      [32m+[0m[0m instance_market_options (known after apply)

      [32m+[0m[0m maintenance_options (known after apply)

      [32m+[0m[0m metadata_options (known after apply)

      [32m+[0m[0m network_interface (known after apply)

      [32m+[0m[0m private_dns_name_options (known after apply)

      [32m+[0m[0m root_block_device {
          [32m+[0m[0m delete_on_termination = true
          [32m+[0m[0m device_name           = (known after apply)
          [32m+[0m[0m encrypted             = (known after apply)
          [32m+[0m[0m iops                  = (known after apply)
          [32m+[0m[0m kms_key_id            = (known after apply)
          [32m+[0m[0m tags_all              = (known after apply)
          [32m+[0m[0m throughput            = (known after apply)
          [32m+[0m[0m volume_id             = (known after apply)
          [32m+[0m[0m volume_size           = 20
          [32m+[0m[0m volume_type           = "gp3"
        }
    }

[1m  # aws_instance.testinstance[0m will be created
[0m  [32m+[0m[0m resource "aws_instance" "testinstance" {
      [32m+[0m[0m ami                                  = "ami-0b221b3f0d70fd316"
      [32m+[0m[0m arn                                  = (known after apply)
      [32m+[0m[0m associate_public_ip_address          = (known after apply)
      [32m+[0m[0m availability_zone                    = (known after apply)
      [32m+[0m[0m cpu_core_count                       = (known after apply)
      [32m+[0m[0m cpu_threads_per_core                 = (known after apply)
      [32m+[0m[0m disable_api_stop                     = (known after apply)
      [32m+[0m[0m disable_api_termination              = (known after apply)
      [32m+[0m[0m ebs_optimized                        = (known after apply)
      [32m+[0m[0m enable_primary_ipv6                  = (known after apply)
      [32m+[0m[0m get_password_data                    = false
      [32m+[0m[0m host_id                              = (known after apply)
      [32m+[0m[0m host_resource_group_arn              = (known after apply)
      [32m+[0m[0m iam_instance_profile                 = (known after apply)
      [32m+[0m[0m id                                   = (known after apply)
      [32m+[0m[0m instance_initiated_shutdown_behavior = (known after apply)
      [32m+[0m[0m instance_lifecycle                   = (known after apply)
      [32m+[0m[0m instance_state                       = (known after apply)
      [32m+[0m[0m instance_type                        = "t3.medium"
      [32m+[0m[0m ipv6_address_count                   = (known after apply)
      [32m+[0m[0m ipv6_addresses                       = (known after apply)
      [32m+[0m[0m key_name                             = "terra-automate-key"
      [32m+[0m[0m monitoring                           = (known after apply)
      [32m+[0m[0m outpost_arn                          = (known after apply)
      [32m+[0m[0m password_data                        = (known after apply)
      [32m+[0m[0m placement_group                      = (known after apply)
      [32m+[0m[0m placement_partition_number           = (known after apply)
      [32m+[0m[0m primary_network_interface_id         = (known after apply)
      [32m+[0m[0m private_dns                          = (known after apply)
      [32m+[0m[0m private_ip                           = (known after apply)
      [32m+[0m[0m public_dns                           = (known after apply)
      [32m+[0m[0m public_ip                            = (known after apply)
      [32m+[0m[0m secondary_private_ips                = (known after apply)
      [32m+[0m[0m security_groups                      = (known after apply)
      [32m+[0m[0m source_dest_check                    = true
      [32m+[0m[0m spot_instance_request_id             = (known after apply)
      [32m+[0m[0m subnet_id                            = (known after apply)
      [32m+[0m[0m tags                                 = {
          [32m+[0m[0m "Name" = "Jenkins-Automate"
        }
      [32m+[0m[0m tags_all                             = {
          [32m+[0m[0m "Name" = "Jenkins-Automate"
        }
      [32m+[0m[0m tenancy                              = (known after apply)
      [32m+[0m[0m user_data                            = "2047fb951b3bb2e9891dc00974e809796cf787a8"
      [32m+[0m[0m user_data_base64                     = (known after apply)
      [32m+[0m[0m user_data_replace_on_change          = false
      [32m+[0m[0m vpc_security_group_ids               = (known after apply)

      [32m+[0m[0m capacity_reservation_specification (known after apply)

      [32m+[0m[0m cpu_options (known after apply)

      [32m+[0m[0m ebs_block_device (known after apply)

      [32m+[0m[0m enclave_options (known after apply)

      [32m+[0m[0m ephemeral_block_device (known after apply)

      [32m+[0m[0m instance_market_options (known after apply)

      [32m+[0m[0m maintenance_options (known after apply)

      [32m+[0m[0m metadata_options (known after apply)

      [32m+[0m[0m network_interface (known after apply)

      [32m+[0m[0m private_dns_name_options (known after apply)

      [32m+[0m[0m root_block_device {
          [32m+[0m[0m delete_on_termination = true
          [32m+[0m[0m device_name           = (known after apply)
          [32m+[0m[0m encrypted             = (known after apply)
          [32m+[0m[0m iops                  = (known after apply)
          [32m+[0m[0m kms_key_id            = (known after apply)
          [32m+[0m[0m tags_all              = (known after apply)
          [32m+[0m[0m throughput            = (known after apply)
          [32m+[0m[0m volume_id             = (known after apply)
          [32m+[0m[0m volume_size           = 20
          [32m+[0m[0m volume_type           = "gp3"
        }
    }

[1m  # aws_key_pair.deployer[0m will be created
[0m  [32m+[0m[0m resource "aws_key_pair" "deployer" {
      [32m+[0m[0m arn             = (known after apply)
      [32m+[0m[0m fingerprint     = (known after apply)
      [32m+[0m[0m id              = (known after apply)
      [32m+[0m[0m key_name        = "terra-automate-key"
      [32m+[0m[0m key_name_prefix = (known after apply)
      [32m+[0m[0m key_pair_id     = (known after apply)
      [32m+[0m[0m key_type        = (known after apply)
      [32m+[0m[0m public_key      = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDF78mZfGD4lD9beGvnUiXspYLQS4aeWELGrvAqGWht9EyOVXgmn8hNyWYfVlIWn+P7+5uaO7p/gpj34ItXuk5p55n4drUsD0/UDlxKIrEb+FjsPt46CykSHLcaMXCe0E4Gfui83LTmSa0wMvllnETdo05f/7vreMO3LXL8Z0Sh/M+9l5bzwYUXMlDHpf+s+pI1jwShkllTFHK6s922DTAq/7GTNz/p667E52sjaLIR+IsNfZJkvfX0vd3BRe+Hn0qo08Se0jnes357dAQyCO+1DgeUvW+cUfoC3+C5A6GdJ0ktnnlamaMTNB9Q0yg258aKcklWhZJ5PQREFWvk5O5TDfXAg1qV7GvFOHU7FISkbOolsHz+0V3l90rNRsDCFQfZbTLnBHFASnl6JYMiN++OdjU4LMQhpsfy8Ne7ax2hz/RGaaY2UxNalioO/ZX3ZOeMU+x4y2JjAfeUvQhFPJf7BWYMClUukriT2oVGGJiJUi0kib4eEaplI7aWJH53tWM= mooaz@mooaz-pc"
      [32m+[0m[0m tags_all        = (known after apply)
    }

[1m  # aws_security_group.allow_user_bastion[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "allow_user_bastion" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "Allow user to connect"
      [32m+[0m[0m egress                 = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m description      = " allow all outgoing traffic "
              [32m+[0m[0m from_port        = 0
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "-1"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 0
            },
        ]
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m description      = "port 22 allow"
              [32m+[0m[0m from_port        = 22
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 22
            },
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m description      = "port 443 allow"
              [32m+[0m[0m from_port        = 443
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 443
            },
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m description      = "port 80 allow"
              [32m+[0m[0m from_port        = 80
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 80
            },
        ]
      [32m+[0m[0m name                   = "bastion_host_SG"
      [32m+[0m[0m name_prefix            = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Name" = "bastion_security"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Name" = "bastion_security"
        }
      [32m+[0m[0m vpc_id                 = (known after apply)
    }

[1m  # aws_security_group.allow_user_to_connect[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "allow_user_to_connect" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "Allow user to connect"
      [32m+[0m[0m egress                 = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m description      = " allow all outgoing traffic "
              [32m+[0m[0m from_port        = 0
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "-1"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 0
            },
        ]
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m description      = "port 22 allow"
              [32m+[0m[0m from_port        = 22
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 22
            },
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m description      = "port 443 allow"
              [32m+[0m[0m from_port        = 443
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 443
            },
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m description      = "port 80 allow"
              [32m+[0m[0m from_port        = 80
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 80
            },
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m description      = "port 8080 allow"
              [32m+[0m[0m from_port        = 8080
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 8080
            },
        ]
      [32m+[0m[0m name                   = "allow TLS"
      [32m+[0m[0m name_prefix            = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Name" = "mysecurity"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Name" = "mysecurity"
        }
      [32m+[0m[0m vpc_id                 = (known after apply)
    }

[1m  # aws_security_group.node_group_remote_access[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "node_group_remote_access" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "Managed by Terraform"
      [32m+[0m[0m egress                 = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m description      = " allow all outgoing traffic "
              [32m+[0m[0m from_port        = 0
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "-1"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 0
            },
        ]
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m description      = "port 22 allow"
              [32m+[0m[0m from_port        = 22
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 22
            },
        ]
      [32m+[0m[0m name                   = "allow HTTP"
      [32m+[0m[0m name_prefix            = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags_all               = (known after apply)
      [32m+[0m[0m vpc_id                 = (known after apply)
    }

[1m  # module.eks.data.aws_eks_addon_version.this["coredns"][0m will be read during apply
  # (depends on a resource or a module with changes pending)
[0m [36m<=[0m[0m data "aws_eks_addon_version" "this" {
      [32m+[0m[0m addon_name         = "coredns"
      [32m+[0m[0m id                 = (known after apply)
      [32m+[0m[0m kubernetes_version = "1.31"
      [32m+[0m[0m most_recent        = true
      [32m+[0m[0m version            = (known after apply)
    }

[1m  # module.eks.data.aws_eks_addon_version.this["kube-proxy"][0m will be read during apply
  # (depends on a resource or a module with changes pending)
[0m [36m<=[0m[0m data "aws_eks_addon_version" "this" {
      [32m+[0m[0m addon_name         = "kube-proxy"
      [32m+[0m[0m id                 = (known after apply)
      [32m+[0m[0m kubernetes_version = "1.31"
      [32m+[0m[0m most_recent        = true
      [32m+[0m[0m version            = (known after apply)
    }

[1m  # module.eks.data.aws_eks_addon_version.this["vpc-cni"][0m will be read during apply
  # (depends on a resource or a module with changes pending)
[0m [36m<=[0m[0m data "aws_eks_addon_version" "this" {
      [32m+[0m[0m addon_name         = "vpc-cni"
      [32m+[0m[0m id                 = (known after apply)
      [32m+[0m[0m kubernetes_version = "1.31"
      [32m+[0m[0m most_recent        = true
      [32m+[0m[0m version            = (known after apply)
    }

[1m  # module.eks.data.tls_certificate.this[0][0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "tls_certificate" "this" {
      [32m+[0m[0m certificates = (known after apply)
      [32m+[0m[0m id           = (known after apply)
      [32m+[0m[0m url          = (known after apply)
    }

[1m  # module.eks.aws_cloudwatch_log_group.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_log_group" "this" {
      [32m+[0m[0m arn               = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m log_group_class   = (known after apply)
      [32m+[0m[0m name              = "/aws/eks/tws-eks-cluster/cluster"
      [32m+[0m[0m name_prefix       = (known after apply)
      [32m+[0m[0m retention_in_days = 90
      [32m+[0m[0m skip_destroy      = false
      [32m+[0m[0m tags              = {
          [32m+[0m[0m "Name"    = "/aws/eks/tws-eks-cluster/cluster"
          [32m+[0m[0m "example" = "tws-eks-cluster"
        }
      [32m+[0m[0m tags_all          = {
          [32m+[0m[0m "Name"    = "/aws/eks/tws-eks-cluster/cluster"
          [32m+[0m[0m "example" = "tws-eks-cluster"
        }
    }

[1m  # module.eks.aws_ec2_tag.cluster_primary_security_group["example"][0m will be created
[0m  [32m+[0m[0m resource "aws_ec2_tag" "cluster_primary_security_group" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m key         = "example"
      [32m+[0m[0m resource_id = (known after apply)
      [32m+[0m[0m value       = "tws-eks-cluster"
    }

[1m  # module.eks.aws_eks_access_entry.this["example"][0m will be created
[0m  [32m+[0m[0m resource "aws_eks_access_entry" "this" {
      [32m+[0m[0m access_entry_arn  = (known after apply)
      [32m+[0m[0m cluster_name      = (known after apply)
      [32m+[0m[0m created_at        = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m kubernetes_groups = (known after apply)
      [32m+[0m[0m modified_at       = (known after apply)
      [32m+[0m[0m principal_arn     = "arn:aws:iam::876997124628:user/terraform"
      [32m+[0m[0m tags              = {
          [32m+[0m[0m "example" = "tws-eks-cluster"
        }
      [32m+[0m[0m tags_all          = {
          [32m+[0m[0m "example" = "tws-eks-cluster"
        }
      [32m+[0m[0m type              = "STANDARD"
      [32m+[0m[0m user_name         = (known after apply)
    }

[1m  # module.eks.aws_eks_access_policy_association.this["example_example"][0m will be created
[0m  [32m+[0m[0m resource "aws_eks_access_policy_association" "this" {
      [32m+[0m[0m associated_at = (known after apply)
      [32m+[0m[0m cluster_name  = (known after apply)
      [32m+[0m[0m id            = (known after apply)
      [32m+[0m[0m modified_at   = (known after apply)
      [32m+[0m[0m policy_arn    = "arn:aws:eks::aws:cluster-access-policy/AmazonEKSClusterAdminPolicy"
      [32m+[0m[0m principal_arn = "arn:aws:iam::876997124628:user/terraform"

      [32m+[0m[0m access_scope {
          [32m+[0m[0m type = "cluster"
        }
    }

[1m  # module.eks.aws_eks_addon.this["coredns"][0m will be created
[0m  [32m+[0m[0m resource "aws_eks_addon" "this" {
      [32m+[0m[0m addon_name                  = "coredns"
      [32m+[0m[0m addon_version               = (known after apply)
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m cluster_name                = (known after apply)
      [32m+[0m[0m configuration_values        = (known after apply)
      [32m+[0m[0m created_at                  = (known after apply)
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m modified_at                 = (known after apply)
      [32m+[0m[0m preserve                    = true
      [32m+[0m[0m resolve_conflicts_on_create = "OVERWRITE"
      [32m+[0m[0m resolve_conflicts_on_update = "OVERWRITE"
      [32m+[0m[0m tags                        = {
          [32m+[0m[0m "example" = "tws-eks-cluster"
        }
      [32m+[0m[0m tags_all                    = {
          [32m+[0m[0m "example" = "tws-eks-cluster"
        }

      [32m+[0m[0m timeouts {}
    }

[1m  # module.eks.aws_eks_addon.this["kube-proxy"][0m will be created
[0m  [32m+[0m[0m resource "aws_eks_addon" "this" {
      [32m+[0m[0m addon_name                  = "kube-proxy"
      [32m+[0m[0m addon_version               = (known after apply)
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m cluster_name                = (known after apply)
      [32m+[0m[0m configuration_values        = (known after apply)
      [32m+[0m[0m created_at                  = (known after apply)
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m modified_at                 = (known after apply)
      [32m+[0m[0m preserve                    = true
      [32m+[0m[0m resolve_conflicts_on_create = "OVERWRITE"
      [32m+[0m[0m resolve_conflicts_on_update = "OVERWRITE"
      [32m+[0m[0m tags                        = {
          [32m+[0m[0m "example" = "tws-eks-cluster"
        }
      [32m+[0m[0m tags_all                    = {
          [32m+[0m[0m "example" = "tws-eks-cluster"
        }

      [32m+[0m[0m timeouts {}
    }

[1m  # module.eks.aws_eks_addon.this["vpc-cni"][0m will be created
[0m  [32m+[0m[0m resource "aws_eks_addon" "this" {
      [32m+[0m[0m addon_name                  = "vpc-cni"
      [32m+[0m[0m addon_version               = (known after apply)
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m cluster_name                = (known after apply)
      [32m+[0m[0m configuration_values        = (known after apply)
      [32m+[0m[0m created_at                  = (known after apply)
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m modified_at                 = (known after apply)
      [32m+[0m[0m preserve                    = true
      [32m+[0m[0m resolve_conflicts_on_create = "OVERWRITE"
      [32m+[0m[0m resolve_conflicts_on_update = "OVERWRITE"
      [32m+[0m[0m tags                        = {
          [32m+[0m[0m "example" = "tws-eks-cluster"
        }
      [32m+[0m[0m tags_all                    = {
          [32m+[0m[0m "example" = "tws-eks-cluster"
        }

      [32m+[0m[0m timeouts {}
    }

[1m  # module.eks.aws_eks_cluster.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_eks_cluster" "this" {
      [32m+[0m[0m arn                           = (known after apply)
      [32m+[0m[0m bootstrap_self_managed_addons = true
      [32m+[0m[0m certificate_authority         = (known after apply)
      [32m+[0m[0m cluster_id                    = (known after apply)
      [32m+[0m[0m created_at                    = (known after apply)
      [32m+[0m[0m enabled_cluster_log_types     = [
          [32m+[0m[0m "api",
          [32m+[0m[0m "audit",
          [32m+[0m[0m "authenticator",
        ]
      [32m+[0m[0m endpoint                      = (known after apply)
      [32m+[0m[0m id                            = (known after apply)
      [32m+[0m[0m identity                      = (known after apply)
      [32m+[0m[0m name                          = "tws-eks-cluster"
      [32m+[0m[0m platform_version              = (known after apply)
      [32m+[0m[0m role_arn                      = (known after apply)
      [32m+[0m[0m status                        = (known after apply)
      [32m+[0m[0m tags                          = {
          [32m+[0m[0m "example"               = "tws-eks-cluster"
          [32m+[0m[0m "terraform-aws-modules" = "eks"
        }
      [32m+[0m[0m tags_all                      = {
          [32m+[0m[0m "example"               = "tws-eks-cluster"
          [32m+[0m[0m "terraform-aws-modules" = "eks"
        }
      [32m+[0m[0m version                       = "1.31"

      [32m+[0m[0m access_config {
          [32m+[0m[0m authentication_mode                         = "API_AND_CONFIG_MAP"
          [32m+[0m[0m bootstrap_cluster_creator_admin_permissions = false
        }

      [32m+[0m[0m encryption_config {
          [32m+[0m[0m resources = [
              [32m+[0m[0m "secrets",
            ]

          [32m+[0m[0m provider {
              [32m+[0m[0m key_arn = (known after apply)
            }
        }

      [32m+[0m[0m kubernetes_network_config {
          [32m+[0m[0m ip_family         = "ipv4"
          [32m+[0m[0m service_ipv4_cidr = (known after apply)
          [32m+[0m[0m service_ipv6_cidr = (known after apply)

          [32m+[0m[0m elastic_load_balancing (known after apply)
        }

      [32m+[0m[0m timeouts {}

      [32m+[0m[0m upgrade_policy (known after apply)

      [32m+[0m[0m vpc_config {
          [32m+[0m[0m cluster_security_group_id = (known after apply)
          [32m+[0m[0m endpoint_private_access   = true
          [32m+[0m[0m endpoint_public_access    = false
          [32m+[0m[0m public_access_cidrs       = [
              [32m+[0m[0m "0.0.0.0/0",
            ]
          [32m+[0m[0m security_group_ids        = (known after apply)
          [32m+[0m[0m subnet_ids                = (known after apply)
          [32m+[0m[0m vpc_id                    = (known after apply)
        }
    }

[1m  # module.eks.aws_iam_openid_connect_provider.oidc_provider[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_openid_connect_provider" "oidc_provider" {
      [32m+[0m[0m arn             = (known after apply)
      [32m+[0m[0m client_id_list  = [
          [32m+[0m[0m "sts.amazonaws.com",
        ]
      [32m+[0m[0m id              = (known after apply)
      [32m+[0m[0m tags            = {
          [32m+[0m[0m "Name"    = "tws-eks-cluster-eks-irsa"
          [32m+[0m[0m "example" = "tws-eks-cluster"
        }
      [32m+[0m[0m tags_all        = {
          [32m+[0m[0m "Name"    = "tws-eks-cluster-eks-irsa"
          [32m+[0m[0m "example" = "tws-eks-cluster"
        }
      [32m+[0m[0m thumbprint_list = (known after apply)
      [32m+[0m[0m url             = (known after apply)
    }

[1m  # module.eks.aws_iam_policy.cluster_encryption[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy" "cluster_encryption" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m attachment_count = (known after apply)
      [32m+[0m[0m description      = "Cluster encryption policy to allow cluster role to utilize CMK provided"
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m name             = (known after apply)
      [32m+[0m[0m name_prefix      = "tws-eks-cluster-cluster-ClusterEncryption"
      [32m+[0m[0m path             = "/"
      [32m+[0m[0m policy           = (known after apply)
      [32m+[0m[0m policy_id        = (known after apply)
      [32m+[0m[0m tags             = {
          [32m+[0m[0m "example" = "tws-eks-cluster"
        }
      [32m+[0m[0m tags_all         = {
          [32m+[0m[0m "example" = "tws-eks-cluster"
        }
    }

[1m  # module.eks.aws_iam_policy.custom[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy" "custom" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m attachment_count = (known after apply)
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m name             = (known after apply)
      [32m+[0m[0m name_prefix      = "tws-eks-cluster-cluster-"
      [32m+[0m[0m path             = "/"
      [32m+[0m[0m policy           = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "ec2:RunInstances",
                          [32m+[0m[0m "ec2:CreateLaunchTemplate",
                          [32m+[0m[0m "ec2:CreateFleet",
                        ]
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m StringEquals = {
                              [32m+[0m[0m "aws:RequestTag/eks:eks-cluster-name" = "${aws:PrincipalTag/eks:eks-cluster-name}"
                            }
                          [32m+[0m[0m StringLike   = {
                              [32m+[0m[0m "aws:RequestTag/eks:kubernetes-node-class-name" = "*"
                              [32m+[0m[0m "aws:RequestTag/eks:kubernetes-node-pool-name"  = "*"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = "*"
                      [32m+[0m[0m Sid       = "Compute"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "ec2:CreateVolume",
                          [32m+[0m[0m "ec2:CreateSnapshot",
                        ]
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m StringEquals = {
                              [32m+[0m[0m "aws:RequestTag/eks:eks-cluster-name" = "${aws:PrincipalTag/eks:eks-cluster-name}"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = [
                          [32m+[0m[0m "arn:aws:ec2:*:*:volume/*",
                          [32m+[0m[0m "arn:aws:ec2:*:*:snapshot/*",
                        ]
                      [32m+[0m[0m Sid       = "Storage"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "ec2:CreateNetworkInterface"
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m StringEquals = {
                              [32m+[0m[0m "aws:RequestTag/eks:eks-cluster-name"         = "${aws:PrincipalTag/eks:eks-cluster-name}"
                              [32m+[0m[0m "aws:RequestTag/eks:kubernetes-cni-node-name" = "*"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = "*"
                      [32m+[0m[0m Sid       = "Networking"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "elasticloadbalancing:CreateTargetGroup",
                          [32m+[0m[0m "elasticloadbalancing:CreateRule",
                          [32m+[0m[0m "elasticloadbalancing:CreateLoadBalancer",
                          [32m+[0m[0m "elasticloadbalancing:CreateListener",
                          [32m+[0m[0m "ec2:CreateSecurityGroup",
                        ]
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m StringEquals = {
                              [32m+[0m[0m "aws:RequestTag/eks:eks-cluster-name" = "${aws:PrincipalTag/eks:eks-cluster-name}"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = "*"
                      [32m+[0m[0m Sid       = "LoadBalancer"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "shield:CreateProtection"
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m StringEquals = {
                              [32m+[0m[0m "aws:RequestTag/eks:eks-cluster-name" = "${aws:PrincipalTag/eks:eks-cluster-name}"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = "*"
                      [32m+[0m[0m Sid       = "ShieldProtection"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "shield:TagResource"
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m StringEquals = {
                              [32m+[0m[0m "aws:RequestTag/eks:eks-cluster-name" = "${aws:PrincipalTag/eks:eks-cluster-name}"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = "arn:aws:shield::*:protection/*"
                      [32m+[0m[0m Sid       = "ShieldTagResource"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m policy_id        = (known after apply)
      [32m+[0m[0m tags             = {
          [32m+[0m[0m "example" = "tws-eks-cluster"
        }
      [32m+[0m[0m tags_all         = {
          [32m+[0m[0m "example" = "tws-eks-cluster"
        }
    }

[1m  # module.eks.aws_iam_role.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "this" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "sts:TagSession",
                          [32m+[0m[0m "sts:AssumeRole",
                        ]
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "eks.amazonaws.com"
                        }
                      [32m+[0m[0m Sid       = "EKSClusterAssumeRole"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = true
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = (known after apply)
      [32m+[0m[0m name_prefix           = "tws-eks-cluster-cluster-"
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "example" = "tws-eks-cluster"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "example" = "tws-eks-cluster"
        }
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy (known after apply)
    }

[1m  # module.eks.aws_iam_role_policy_attachment.cluster_encryption[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "cluster_encryption" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = (known after apply)
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.eks.aws_iam_role_policy_attachment.custom[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "custom" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = (known after apply)
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.eks.aws_iam_role_policy_attachment.this["AmazonEKSClusterPolicy"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "this" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.eks.aws_iam_role_policy_attachment.this["AmazonEKSVPCResourceController"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "this" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKSVPCResourceController"
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.eks.aws_security_group.cluster[0][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "cluster" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "EKS cluster security group"
      [32m+[0m[0m egress                 = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = (known after apply)
      [32m+[0m[0m name                   = (known after apply)
      [32m+[0m[0m name_prefix            = "tws-eks-cluster-cluster-"
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Name"    = "tws-eks-cluster-cluster"
          [32m+[0m[0m "example" = "tws-eks-cluster"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Name"    = "tws-eks-cluster-cluster"
          [32m+[0m[0m "example" = "tws-eks-cluster"
        }
      [32m+[0m[0m vpc_id                 = (known after apply)
    }

[1m  # module.eks.aws_security_group.node[0][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "node" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "EKS node shared security group"
      [32m+[0m[0m egress                 = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = (known after apply)
      [32m+[0m[0m name                   = (known after apply)
      [32m+[0m[0m name_prefix            = "tws-eks-cluster-node-"
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Name"                                  = "tws-eks-cluster-node"
          [32m+[0m[0m "example"                               = "tws-eks-cluster"
          [32m+[0m[0m "kubernetes.io/cluster/tws-eks-cluster" = "owned"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Name"                                  = "tws-eks-cluster-node"
          [32m+[0m[0m "example"                               = "tws-eks-cluster"
          [32m+[0m[0m "kubernetes.io/cluster/tws-eks-cluster" = "owned"
        }
      [32m+[0m[0m vpc_id                 = (known after apply)
    }

[1m  # module.eks.aws_security_group_rule.cluster["access_for_bastion_jenkins_hosts"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "cluster" {
      [32m+[0m[0m cidr_blocks              = [
          [32m+[0m[0m "0.0.0.0/0",
        ]
      [32m+[0m[0m description              = "Allow all HTTPS traffic from jenkins and Bastion host"
      [32m+[0m[0m from_port                = 443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.cluster["ingress_nodes_443"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "cluster" {
      [32m+[0m[0m description              = "Node groups to cluster API"
      [32m+[0m[0m from_port                = 443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["egress_all"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m cidr_blocks              = [
          [32m+[0m[0m "0.0.0.0/0",
        ]
      [32m+[0m[0m description              = "Allow all egress"
      [32m+[0m[0m from_port                = 0
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "-1"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 0
      [32m+[0m[0m type                     = "egress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_cluster_443"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Cluster API to node groups"
      [32m+[0m[0m from_port                = 443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_cluster_4443_webhook"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Cluster API to node 4443/tcp webhook"
      [32m+[0m[0m from_port                = 4443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 4443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_cluster_6443_webhook"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Cluster API to node 6443/tcp webhook"
      [32m+[0m[0m from_port                = 6443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 6443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_cluster_8443_webhook"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Cluster API to node 8443/tcp webhook"
      [32m+[0m[0m from_port                = 8443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 8443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_cluster_9443_webhook"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Cluster API to node 9443/tcp webhook"
      [32m+[0m[0m from_port                = 9443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 9443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_cluster_kubelet"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Cluster API to node kubelets"
      [32m+[0m[0m from_port                = 10250
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 10250
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_nodes_ephemeral"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Node to node ingress on ephemeral ports"
      [32m+[0m[0m from_port                = 1025
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = true
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 65535
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_self_coredns_tcp"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Node to node CoreDNS"
      [32m+[0m[0m from_port                = 53
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = true
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 53
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_self_coredns_udp"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Node to node CoreDNS UDP"
      [32m+[0m[0m from_port                = 53
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "udp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = true
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 53
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.time_sleep.this[0][0m will be created
[0m  [32m+[0m[0m resource "time_sleep" "this" {
      [32m+[0m[0m create_duration = "30s"
      [32m+[0m[0m id              = (known after apply)
      [32m+[0m[0m triggers        = {
          [32m+[0m[0m "cluster_certificate_authority_data" = (known after apply)
          [32m+[0m[0m "cluster_endpoint"                   = (known after apply)
          [32m+[0m[0m "cluster_name"                       = (known after apply)
          [32m+[0m[0m "cluster_service_cidr"               = (known after apply)
          [32m+[0m[0m "cluster_version"                    = "1.31"
        }
    }

[1m  # module.vpc.aws_default_network_acl.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_default_network_acl" "this" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m default_network_acl_id = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Name" = "tws-eks-cluster-default"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Name" = "tws-eks-cluster-default"
        }
      [32m+[0m[0m vpc_id                 = (known after apply)

      [32m+[0m[0m egress {
          [32m+[0m[0m action          = "allow"
          [32m+[0m[0m from_port       = 0
          [32m+[0m[0m ipv6_cidr_block = "::/0"
          [32m+[0m[0m protocol        = "-1"
          [32m+[0m[0m rule_no         = 101
          [32m+[0m[0m to_port         = 0
            [90m# (1 unchanged attribute hidden)[0m[0m
        }
      [32m+[0m[0m egress {
          [32m+[0m[0m action          = "allow"
          [32m+[0m[0m cidr_block      = "0.0.0.0/0"
          [32m+[0m[0m from_port       = 0
          [32m+[0m[0m protocol        = "-1"
          [32m+[0m[0m rule_no         = 100
          [32m+[0m[0m to_port         = 0
            [90m# (1 unchanged attribute hidden)[0m[0m
        }

      [32m+[0m[0m ingress {
          [32m+[0m[0m action          = "allow"
          [32m+[0m[0m from_port       = 0
          [32m+[0m[0m ipv6_cidr_block = "::/0"
          [32m+[0m[0m protocol        = "-1"
          [32m+[0m[0m rule_no         = 101
          [32m+[0m[0m to_port         = 0
            [90m# (1 unchanged attribute hidden)[0m[0m
        }
      [32m+[0m[0m ingress {
          [32m+[0m[0m action          = "allow"
          [32m+[0m[0m cidr_block      = "0.0.0.0/0"
          [32m+[0m[0m from_port       = 0
          [32m+[0m[0m protocol        = "-1"
          [32m+[0m[0m rule_no         = 100
          [32m+[0m[0m to_port         = 0
            [90m# (1 unchanged attribute hidden)[0m[0m
        }
    }

[1m  # module.vpc.aws_default_route_table.default[0][0m will be created
[0m  [32m+[0m[0m resource "aws_default_route_table" "default" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m default_route_table_id = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m route                  = (known after apply)
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Name" = "tws-eks-cluster-default"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Name" = "tws-eks-cluster-default"
        }
      [32m+[0m[0m vpc_id                 = (known after apply)

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.vpc.aws_default_security_group.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_default_security_group" "this" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = (known after apply)
      [32m+[0m[0m egress                 = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = (known after apply)
      [32m+[0m[0m name                   = (known after apply)
      [32m+[0m[0m name_prefix            = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Name" = "tws-eks-cluster-default"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Name" = "tws-eks-cluster-default"
        }
      [32m+[0m[0m vpc_id                 = (known after apply)
    }

[1m  # module.vpc.aws_eip.nat[0][0m will be created
[0m  [32m+[0m[0m resource "aws_eip" "nat" {
      [32m+[0m[0m allocation_id        = (known after apply)
      [32m+[0m[0m arn                  = (known after apply)
      [32m+[0m[0m association_id       = (known after apply)
      [32m+[0m[0m carrier_ip           = (known after apply)
      [32m+[0m[0m customer_owned_ip    = (known after apply)
      [32m+[0m[0m domain               = "vpc"
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m instance             = (known after apply)
      [32m+[0m[0m ipam_pool_id         = (known after apply)
      [32m+[0m[0m network_border_group = (known after apply)
      [32m+[0m[0m network_interface    = (known after apply)
      [32m+[0m[0m private_dns          = (known after apply)
      [32m+[0m[0m private_ip           = (known after apply)
      [32m+[0m[0m ptr_record           = (known after apply)
      [32m+[0m[0m public_dns           = (known after apply)
      [32m+[0m[0m public_ip            = (known after apply)
      [32m+[0m[0m public_ipv4_pool     = (known after apply)
      [32m+[0m[0m tags                 = {
          [32m+[0m[0m "Name" = "tws-eks-cluster-eu-west-1a"
        }
      [32m+[0m[0m tags_all             = {
          [32m+[0m[0m "Name" = "tws-eks-cluster-eu-west-1a"
        }
      [32m+[0m[0m vpc                  = (known after apply)
    }

[1m  # module.vpc.aws_internet_gateway.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_internet_gateway" "this" {
      [32m+[0m[0m arn      = (known after apply)
      [32m+[0m[0m id       = (known after apply)
      [32m+[0m[0m owner_id = (known after apply)
      [32m+[0m[0m tags     = {
          [32m+[0m[0m "Name" = "tws-eks-cluster"
        }
      [32m+[0m[0m tags_all = {
          [32m+[0m[0m "Name" = "tws-eks-cluster"
        }
      [32m+[0m[0m vpc_id   = (known after apply)
    }

[1m  # module.vpc.aws_nat_gateway.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_nat_gateway" "this" {
      [32m+[0m[0m allocation_id                      = (known after apply)
      [32m+[0m[0m association_id                     = (known after apply)
      [32m+[0m[0m connectivity_type                  = "public"
      [32m+[0m[0m id                                 = (known after apply)
      [32m+[0m[0m network_interface_id               = (known after apply)
      [32m+[0m[0m private_ip                         = (known after apply)
      [32m+[0m[0m public_ip                          = (known after apply)
      [32m+[0m[0m secondary_private_ip_address_count = (known after apply)
      [32m+[0m[0m secondary_private_ip_addresses     = (known after apply)
      [32m+[0m[0m subnet_id                          = (known after apply)
      [32m+[0m[0m tags                               = {
          [32m+[0m[0m "Name" = "tws-eks-cluster-eu-west-1a"
        }
      [32m+[0m[0m tags_all                           = {
          [32m+[0m[0m "Name" = "tws-eks-cluster-eu-west-1a"
        }
    }

[1m  # module.vpc.aws_route.private_nat_gateway[0][0m will be created
[0m  [32m+[0m[0m resource "aws_route" "private_nat_gateway" {
      [32m+[0m[0m destination_cidr_block = "0.0.0.0/0"
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m instance_id            = (known after apply)
      [32m+[0m[0m instance_owner_id      = (known after apply)
      [32m+[0m[0m nat_gateway_id         = (known after apply)
      [32m+[0m[0m network_interface_id   = (known after apply)
      [32m+[0m[0m origin                 = (known after apply)
      [32m+[0m[0m route_table_id         = (known after apply)
      [32m+[0m[0m state                  = (known after apply)

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
        }
    }

[1m  # module.vpc.aws_route.public_internet_gateway[0][0m will be created
[0m  [32m+[0m[0m resource "aws_route" "public_internet_gateway" {
      [32m+[0m[0m destination_cidr_block = "0.0.0.0/0"
      [32m+[0m[0m gateway_id             = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m instance_id            = (known after apply)
      [32m+[0m[0m instance_owner_id      = (known after apply)
      [32m+[0m[0m network_interface_id   = (known after apply)
      [32m+[0m[0m origin                 = (known after apply)
      [32m+[0m[0m route_table_id         = (known after apply)
      [32m+[0m[0m state                  = (known after apply)

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
        }
    }

[1m  # module.vpc.aws_route_table.private[0][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table" "private" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m owner_id         = (known after apply)
      [32m+[0m[0m propagating_vgws = (known after apply)
      [32m+[0m[0m route            = (known after apply)
      [32m+[0m[0m tags             = {
          [32m+[0m[0m "Name" = "tws-eks-cluster-private"
        }
      [32m+[0m[0m tags_all         = {
          [32m+[0m[0m "Name" = "tws-eks-cluster-private"
        }
      [32m+[0m[0m vpc_id           = (known after apply)
    }

[1m  # module.vpc.aws_route_table.public[0][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table" "public" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m owner_id         = (known after apply)
      [32m+[0m[0m propagating_vgws = (known after apply)
      [32m+[0m[0m route            = (known after apply)
      [32m+[0m[0m tags             = {
          [32m+[0m[0m "Name" = "tws-eks-cluster-public"
        }
      [32m+[0m[0m tags_all         = {
          [32m+[0m[0m "Name" = "tws-eks-cluster-public"
        }
      [32m+[0m[0m vpc_id           = (known after apply)
    }

[1m  # module.vpc.aws_route_table_association.private[0][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "private" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.vpc.aws_route_table_association.private[1][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "private" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.vpc.aws_route_table_association.public[0][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "public" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.vpc.aws_route_table_association.public[1][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "public" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.vpc.aws_subnet.private[0][0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "private" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "eu-west-1a"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.3.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Name"                            = "tws-eks-cluster-private-eu-west-1a"
          [32m+[0m[0m "kubernetes.io/role/internal-elb" = "1"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Name"                            = "tws-eks-cluster-private-eu-west-1a"
          [32m+[0m[0m "kubernetes.io/role/internal-elb" = "1"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.vpc.aws_subnet.private[1][0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "private" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "eu-west-1b"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.4.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Name"                            = "tws-eks-cluster-private-eu-west-1b"
          [32m+[0m[0m "kubernetes.io/role/internal-elb" = "1"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Name"                            = "tws-eks-cluster-private-eu-west-1b"
          [32m+[0m[0m "kubernetes.io/role/internal-elb" = "1"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.vpc.aws_subnet.public[0][0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "public" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "eu-west-1a"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.1.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = true
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Name"                   = "tws-eks-cluster-public-eu-west-1a"
          [32m+[0m[0m "kubernetes.io/role/elb" = "1"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Name"                   = "tws-eks-cluster-public-eu-west-1a"
          [32m+[0m[0m "kubernetes.io/role/elb" = "1"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.vpc.aws_subnet.public[1][0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "public" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "eu-west-1b"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.2.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = true
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Name"                   = "tws-eks-cluster-public-eu-west-1b"
          [32m+[0m[0m "kubernetes.io/role/elb" = "1"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Name"                   = "tws-eks-cluster-public-eu-west-1b"
          [32m+[0m[0m "kubernetes.io/role/elb" = "1"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.vpc.aws_vpc.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_vpc" "this" {
      [32m+[0m[0m arn                                  = (known after apply)
      [32m+[0m[0m cidr_block                           = "10.0.0.0/16"
      [32m+[0m[0m default_network_acl_id               = (known after apply)
      [32m+[0m[0m default_route_table_id               = (known after apply)
      [32m+[0m[0m default_security_group_id            = (known after apply)
      [32m+[0m[0m dhcp_options_id                      = (known after apply)
      [32m+[0m[0m enable_dns_hostnames                 = true
      [32m+[0m[0m enable_dns_support                   = true
      [32m+[0m[0m enable_network_address_usage_metrics = (known after apply)
      [32m+[0m[0m id                                   = (known after apply)
      [32m+[0m[0m instance_tenancy                     = "default"
      [32m+[0m[0m ipv6_association_id                  = (known after apply)
      [32m+[0m[0m ipv6_cidr_block                      = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_network_border_group = (known after apply)
      [32m+[0m[0m main_route_table_id                  = (known after apply)
      [32m+[0m[0m owner_id                             = (known after apply)
      [32m+[0m[0m tags                                 = {
          [32m+[0m[0m "Name" = "tws-eks-cluster"
        }
      [32m+[0m[0m tags_all                             = {
          [32m+[0m[0m "Name" = "tws-eks-cluster"
        }
    }

[1m  # module.eks.module.eks_managed_node_group["tws-demo-ng"].aws_eks_node_group.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_eks_node_group" "this" {
      [32m+[0m[0m ami_type               = (known after apply)
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m capacity_type          = "SPOT"
      [32m+[0m[0m cluster_name           = (known after apply)
      [32m+[0m[0m disk_size              = 35
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m instance_types         = [
          [32m+[0m[0m "t3.large",
        ]
      [32m+[0m[0m node_group_name        = (known after apply)
      [32m+[0m[0m node_group_name_prefix = "tws-demo-ng-"
      [32m+[0m[0m node_role_arn          = (known after apply)
      [32m+[0m[0m release_version        = (known after apply)
      [32m+[0m[0m resources              = (known after apply)
      [32m+[0m[0m status                 = (known after apply)
      [32m+[0m[0m subnet_ids             = (known after apply)
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ExtraTag"    = "e-commerce-app"
          [32m+[0m[0m "Name"        = "tws-demo-ng"
          [32m+[0m[0m "example"     = "tws-eks-cluster"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ExtraTag"    = "e-commerce-app"
          [32m+[0m[0m "Name"        = "tws-demo-ng"
          [32m+[0m[0m "example"     = "tws-eks-cluster"
        }
      [32m+[0m[0m version                = "1.31"

      [32m+[0m[0m node_repair_config (known after apply)

      [32m+[0m[0m remote_access (known after apply)

      [32m+[0m[0m scaling_config {
          [32m+[0m[0m desired_size = 1
          [32m+[0m[0m max_size     = 3
          [32m+[0m[0m min_size     = 1
        }

      [32m+[0m[0m timeouts {}

      [32m+[0m[0m update_config {
          [32m+[0m[0m max_unavailable_percentage = 33
        }
    }

[1m  # module.eks.module.eks_managed_node_group["tws-demo-ng"].aws_iam_role.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "this" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "ec2.amazonaws.com"
                        }
                      [32m+[0m[0m Sid       = "EKSNodeAssumeRole"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m description           = "EKS managed node group IAM role"
      [32m+[0m[0m force_detach_policies = true
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = (known after apply)
      [32m+[0m[0m name_prefix           = "tws-demo-ng-eks-node-group-"
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ExtraTag"    = "e-commerce-app"
          [32m+[0m[0m "Name"        = "tws-demo-ng"
          [32m+[0m[0m "example"     = "tws-eks-cluster"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ExtraTag"    = "e-commerce-app"
          [32m+[0m[0m "Name"        = "tws-demo-ng"
          [32m+[0m[0m "example"     = "tws-eks-cluster"
        }
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy (known after apply)
    }

[1m  # module.eks.module.eks_managed_node_group["tws-demo-ng"].aws_iam_role_policy_attachment.this["AmazonEC2ContainerRegistryReadOnly"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "this" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.eks.module.eks_managed_node_group["tws-demo-ng"].aws_iam_role_policy_attachment.this["AmazonEKSWorkerNodePolicy"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "this" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.eks.module.eks_managed_node_group["tws-demo-ng"].aws_iam_role_policy_attachment.this["AmazonEKS_CNI_Policy"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "this" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.eks.module.kms.data.aws_iam_policy_document.this[0][0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "aws_iam_policy_document" "this" {
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m json                      = (known after apply)
      [32m+[0m[0m minified_json             = (known after apply)
      [32m+[0m[0m override_policy_documents = []
      [32m+[0m[0m source_policy_documents   = []

      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "kms:*",
            ]
          [32m+[0m[0m resources = [
              [32m+[0m[0m "*",
            ]
          [32m+[0m[0m sid       = "Default"

          [32m+[0m[0m principals {
              [32m+[0m[0m identifiers = [
                  [32m+[0m[0m "arn:aws:iam::393627897845:root",
                ]
              [32m+[0m[0m type        = "AWS"
            }
        }
      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "kms:CancelKeyDeletion",
              [32m+[0m[0m "kms:Create*",
              [32m+[0m[0m "kms:Delete*",
              [32m+[0m[0m "kms:Describe*",
              [32m+[0m[0m "kms:Disable*",
              [32m+[0m[0m "kms:Enable*",
              [32m+[0m[0m "kms:Get*",
              [32m+[0m[0m "kms:ImportKeyMaterial",
              [32m+[0m[0m "kms:List*",
              [32m+[0m[0m "kms:Put*",
              [32m+[0m[0m "kms:ReplicateKey",
              [32m+[0m[0m "kms:Revoke*",
              [32m+[0m[0m "kms:ScheduleKeyDeletion",
              [32m+[0m[0m "kms:TagResource",
              [32m+[0m[0m "kms:UntagResource",
              [32m+[0m[0m "kms:Update*",
            ]
          [32m+[0m[0m resources = [
              [32m+[0m[0m "*",
            ]
          [32m+[0m[0m sid       = "KeyAdministration"

          [32m+[0m[0m principals {
              [32m+[0m[0m identifiers = [
                  [32m+[0m[0m "arn:aws:iam::393627897845:user/Admin-One",
                ]
              [32m+[0m[0m type        = "AWS"
            }
        }
      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "kms:Decrypt",
              [32m+[0m[0m "kms:DescribeKey",
              [32m+[0m[0m "kms:Encrypt",
              [32m+[0m[0m "kms:GenerateDataKey*",
              [32m+[0m[0m "kms:ReEncrypt*",
            ]
          [32m+[0m[0m resources = [
              [32m+[0m[0m "*",
            ]
          [32m+[0m[0m sid       = "KeyUsage"

          [32m+[0m[0m principals {
              [32m+[0m[0m identifiers = [
                  [32m+[0m[0m (known after apply),
                ]
              [32m+[0m[0m type        = "AWS"
            }
        }
    }

[1m  # module.eks.module.kms.aws_kms_alias.this["cluster"][0m will be created
[0m  [32m+[0m[0m resource "aws_kms_alias" "this" {
      [32m+[0m[0m arn            = (known after apply)
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m name           = "alias/eks/tws-eks-cluster"
      [32m+[0m[0m name_prefix    = (known after apply)
      [32m+[0m[0m target_key_arn = (known after apply)
      [32m+[0m[0m target_key_id  = (known after apply)
    }

[1m  # module.eks.module.kms.aws_kms_key.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_kms_key" "this" {
      [32m+[0m[0m arn                                = (known after apply)
      [32m+[0m[0m bypass_policy_lockout_safety_check = false
      [32m+[0m[0m customer_master_key_spec           = "SYMMETRIC_DEFAULT"
      [32m+[0m[0m description                        = "tws-eks-cluster cluster encryption key"
      [32m+[0m[0m enable_key_rotation                = true
      [32m+[0m[0m id                                 = (known after apply)
      [32m+[0m[0m is_enabled                         = true
      [32m+[0m[0m key_id                             = (known after apply)
      [32m+[0m[0m key_usage                          = "ENCRYPT_DECRYPT"
      [32m+[0m[0m multi_region                       = false
      [32m+[0m[0m policy                             = (known after apply)
      [32m+[0m[0m rotation_period_in_days            = (known after apply)
      [32m+[0m[0m tags                               = {
          [32m+[0m[0m "example"               = "tws-eks-cluster"
          [32m+[0m[0m "terraform-aws-modules" = "eks"
        }
      [32m+[0m[0m tags_all                           = {
          [32m+[0m[0m "example"               = "tws-eks-cluster"
          [32m+[0m[0m "terraform-aws-modules" = "eks"
        }
    }

[1m  # module.eks.module.eks_managed_node_group["tws-demo-ng"].module.user_data.null_resource.validate_cluster_service_cidr[0m will be created
[0m  [32m+[0m[0m resource "null_resource" "validate_cluster_service_cidr" {
      [32m+[0m[0m id = (known after apply)
    }

[1mPlan:[0m 65 to add, 0 to change, 0 to destroy.
[0m
Changes to Outputs:
  [32m+[0m[0m eks_cluster_endpoint      = (known after apply)
  [32m+[0m[0m eks_cluster_name          = "tws-eks-cluster"
  [32m+[0m[0m eks_node_group_public_ips = (known after apply)
  [32m+[0m[0m public_ip                 = (known after apply)
  [32m+[0m[0m region                    = "eu-west-1"
  [32m+[0m[0m vpc_id                    = (known after apply)
[90m
─────────────────────────────────────────────────────────────────────────────[0m

Note: You didn't use the -out option to save this plan, so Terraform can't
guarantee to take exactly these actions if you run "terraform apply" now.
Releasing state lock. This may take a few moments...
